swagger: '2.0'
info:
  title: CRUD_Application
  x-ibm-name: crud_application
  version: 1.0.0
x-ibm-configuration:
  cors:
    enabled: true
  gateway: datapower-api-gateway
  type: rest
  phase: realized
  enforced: true
  testable: true
  assembly:
    execute:
      - operation-switch:
          version: 2.0.0
          title: operation-switch
          case:
            - operations:
                - verb: post
                  path: /register
              execute:
                - invoke:
                    version: 2.2.0
                    title: invoke
                    backend-type: detect
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    http-version: HTTP/1.1
                    timeout: 60
                    verb: keep
                    chunked-uploads: true
                    persistent-connection: true
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    graphql-send-type: detect
                    websocket-upgrade: false
                    target-url: http://192.168.1.174:2001/employee/saveEmp
            - operations:
                - verb: put
                  path: /update
              execute:
                - invoke:
                    version: 2.2.0
                    title: invoke
                    backend-type: detect
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    http-version: HTTP/1.1
                    timeout: 60
                    verb: keep
                    chunked-uploads: true
                    persistent-connection: true
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    graphql-send-type: detect
                    websocket-upgrade: false
                    target-url: http://192.168.1.174:2001/employee/updateEmp
            - operations:
                - verb: delete
                  path: /delete
              execute:
                - invoke:
                    version: 2.2.0
                    title: invoke
                    backend-type: detect
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    http-version: HTTP/1.1
                    timeout: 60
                    verb: keep
                    chunked-uploads: true
                    persistent-connection: true
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    graphql-send-type: detect
                    websocket-upgrade: false
                    target-url: http://192.168.1.174:2001/employee/deleteEmp
                    keep-payload: true
            - operations:
                - verb: get
                  path: /showEmpById/{empId}
              execute:
                - invoke:
                    version: 2.2.0
                    title: invoke
                    backend-type: detect
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    http-version: HTTP/1.1
                    timeout: 60
                    verb: keep
                    chunked-uploads: true
                    persistent-connection: true
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    graphql-send-type: detect
                    websocket-upgrade: false
                    target-url: http://192.168.1.174:2001/employee/getEmp/{empId}
            - operations:
                - verb: get
                  path: /showAll
              execute:
                - invoke:
                    version: 2.2.0
                    title: invoke
                    backend-type: detect
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    http-version: HTTP/1.1
                    timeout: 60
                    verb: keep
                    chunked-uploads: true
                    persistent-connection: true
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    graphql-send-type: detect
                    websocket-upgrade: false
                    target-url: http://192.168.1.174:2001/employee/getAll
          otherwise: []
    catch: []
    finally: []
  properties: {}
  activity-log:
    enabled: true
    success-content: activity
    error-content: payload
  servers:
    - url: ''
  oauth-servers: []
basePath: /crud_application/v1
paths:
  /update:
    put:
      responses:
        '200':
          description: success
          schema:
            type: string
      parameters:
        - name: userData
          required: true
          in: body
          schema:
            title: user
            type: object
            example:
              empId: 888
              email: rahul@gmail.com
              empName: Rahul
              doj: '2023-09-11T00:00:00.000Z'
              number: 8789561234
              about: it is a Developer
              designation: Developer
              password: Rahul123
  /showAll:
    get:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
  /delete:
    delete:
      responses:
        '200':
          description: success
          schema:
            type: string
      parameters:
        - name: empId
          required: true
          in: body
          schema:
            title: EmpId
            type: object
            example:
              empId: 888
    parameters: []
  /register:
    post:
      responses:
        '200':
          description: success
          schema:
            type: string
    parameters:
      - name: userData
        required: true
        in: body
        schema:
          title: user
          type: object
          example:
            empId: 888
            empName: Rahul
            doj: '2023-09-11'
            number: 8789561234
            about: it is a Developer
            designation: Developer
            email: rahul@gmail.com
            password: Rahul123
  /showEmpById/{empId}:
    parameters:
      - name: empId
        required: true
        in: path
        type: integer
    get:
      responses:
        '200':
          description: success
          schema:
            type: string
securityDefinitions:
  clientID:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  OAuth:
    type: oauth2
    x-ibm-oauth-provider: myauth
    flow: application
    tokenUrl: https://$(catalog.url)/myauth/oauth2/token
    scopes:
      read: Sample scope read
  ImplOAuth:
    type: oauth2
    x-ibm-oauth-provider: myimplicitop
    flow: implicit
    authorizationUrl: https://$(catalog.url)/myimplicitop/oauth2/authorize
    scopes:
      read: 'Sample scope read '
  AccessCodeOauth:
    type: oauth2
    x-ibm-oauth-provider: myaccesscodeop
    flow: accessCode
    authorizationUrl: https://$(catalog.url)/myaccesscodeop/oauth2/authorize
    tokenUrl: https://$(catalog.url)/myaccesscodeop/oauth2/token
    scopes:
      read: 'Sample scope read '
  OAuthResPass:
    type: oauth2
    x-ibm-oauth-provider: myoauthrespass
    flow: password
    tokenUrl: https://$(catalog.url)/myoauthrespass/oauth2/token
    scopes:
      read: Sample scope read
security:
  - clientID: []
  - OAuth:
      - read
  - ImplOAuth:
      - read
  - AccessCodeOauth:
      - read
  - {}
  - OAuthResPass:
      - read
schemes:
  - https
